From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Calvin Watford <watfordcalvin@gmail.com>
Date: Tue, 15 Apr 2025 13:20:02 -0600
Subject: fix: electron handles NSWindow background color and transparency

When a macOS window uses vibrancy, we must create the widget with
translucency for proper compositing. However, there is some old code in
Chromium that makes the window's background color fully transparent when
the widget is translucent. This is undesirable for windows with
vibrancy, as it disables some window border effects--specifically, the
edge illumination in dark mode.

In Electron we want to have tight control of these properties on the
window. The simplest way forward here is to make Chromium conform to us.

Ref: https://github.com/electron/electron/issues/46586 ("Setting vibrancy removes window border style")

diff --git a/components/remote_cocoa/app_shim/native_widget_ns_window_bridge.mm b/components/remote_cocoa/app_shim/native_widget_ns_window_bridge.mm
index 2c81ecef35d40036111cbd3dbdb44f7086d8946e..31a397e52b33194abf1f52177633393adbfac94c 100644
--- a/components/remote_cocoa/app_shim/native_widget_ns_window_bridge.mm
+++ b/components/remote_cocoa/app_shim/native_widget_ns_window_bridge.mm
@@ -1313,8 +1313,11 @@ NSUInteger CountBridgedWindows(NSArray* child_windows) {
   // for the composited NonClientFrameView, which should be the case since the
   // native shape is what's most appropriate for displaying sheets on Mac.
   if (is_translucent_window_ && !IsWindowModalSheet()) {
-    [window_ setOpaque:NO];
-    [window_ setBackgroundColor:[NSColor clearColor]];
+    // ELECTRON: These two operations are handled by NativeWindowMac. In particular, the
+    //           `setBackgroundColor` operation here disables the natural window border style for
+    //           windows with vibrancy.
+    // [window_ setOpaque:NO];
+    // [window_ setBackgroundColor:[NSColor clearColor]];
 
     // Don't block waiting for the initial frame of completely transparent
     // windows. This allows us to avoid blocking on the UI thread e.g, while
